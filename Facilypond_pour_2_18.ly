
% MISE EN PAGE DE LA PARTITION:
Taille-du-papier = "a4"  %exemples: a3, a4, a6...format paysage = a4landscape...
titre = ""  compositeur = "" slogan = "" copyright = ""  sous-titre = ""  instrument = ""  librettiste = "" vitesse = "" arrangeur = "" "pièce" = ""  opus = ""                                                                                             \version "2.18.0"                                                                                                                                                                      
taille-globale-de-la-partition = 20
Distance-entre-les-portées = 10 
Distance-entre-les-portées-dans-un-groupement = 10
Distance-entre-groupements-de-portées-dans-un-système = 10
Distance-entre-les-systèmes = 15 % en millimètres   
Marge-gauche = 15  M-haut = 20  M-bas = 20  M-droite = 15
Marge-suppl-premier-système = 20 % en millimètres
Distance-entre-texte-et-partition = 0

%  Pour activer les options ci-dessous, supprimer le "%" en début de ligne.
%     %{ Créer des slash entre les systèmes %}                                                                \paper {system-separator-markup = \slashSeparator}
%     %{ Ne pas afficher les portées vides %}                                                                 \layout { \context { \Score \RemoveEmptyStaves } }
%     %{ Notation polymétrique (chiffrages différents sur chaque portée %}                                    \layout { \context { \Score  \remove "Timing_translator" \remove "Default_bar_line_engraver"} \context {  \Staff \consists "Timing_translator" \consists "Default_bar_line_engraver" \consists "Bar_number_engraver" \override BarNumber.break-visibility = ##(#f #t #f)  \override BarNumber #'extra-offset = #'(1.5 . 0) } } 
%     %{ Désactiver les noms des notes sans ' ni ,. Attention, il faudra ensuite utiliser le code lilypond original pour indiquer les tonalités (exemple: \key c \major). %}                                                                                                                                                                                                                                                                %{  

%%%%%%   VOIR PLUS BAS ET NE RIEN ÉCRIRE CI-DESSOUS. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
                                                                                                                                                                                                                                                                   pitchnames = #`(
                                                                                                                                                                                                                                                                    (CCC . ,(ly:make-pitch -3 0 NATURAL))	     (BBB . ,(ly:make-pitch -3 6 NATURAL))	            (AAA . ,(ly:make-pitch -3 5 NATURAL))	            (GGG . ,(ly:make-pitch -3 4 NATURAL))	            (FFF . ,(ly:make-pitch -3 3 NATURAL))	            (EEE . ,(ly:make-pitch -3 2 NATURAL))	            (DDD . ,(ly:make-pitch -3 1 NATURAL))	            (CC . ,(ly:make-pitch -2 0 NATURAL))	            (BB . ,(ly:make-pitch -2 6 NATURAL))	            (AA . ,(ly:make-pitch -2 5 NATURAL))	            (GG . ,(ly:make-pitch -2 4 NATURAL))	            (FF . ,(ly:make-pitch -2 3 NATURAL))	            (EE . ,(ly:make-pitch -2 2 NATURAL))	            (DD . ,(ly:make-pitch -2 1 NATURAL))	            (C . ,(ly:make-pitch -1 0 NATURAL))	            (D . ,(ly:make-pitch -1 1 NATURAL))	            (E . ,(ly:make-pitch -1 2 NATURAL))	            (F . ,(ly:make-pitch -1 3 NATURAL))	            (G . ,(ly:make-pitch -1 4 NATURAL))	            (A . ,(ly:make-pitch -1 5 NATURAL))	            (B . ,(ly:make-pitch -1 6 NATURAL))	            (c . ,(ly:make-pitch 0 0 NATURAL))	            (d . ,(ly:make-pitch 0 1 NATURAL))	            (e . ,(ly:make-pitch 0 2 NATURAL))	            (f . ,(ly:make-pitch 0 3 NATURAL))	            (g . ,(ly:make-pitch 0 4 NATURAL))	            (a . ,(ly:make-pitch 0 5 NATURAL))	            (b . ,(ly:make-pitch 0 6 NATURAL))	            (cc . ,(ly:make-pitch 1 0 NATURAL))	            (dd . ,(ly:make-pitch 1 1 NATURAL))	            (ee . ,(ly:make-pitch 1 2 NATURAL))	            (ff . ,(ly:make-pitch 1 3 NATURAL))	            (gg . ,(ly:make-pitch 1 4 NATURAL))	            (aa . ,(ly:make-pitch 1 5 NATURAL))	            (bb . ,(ly:make-pitch 1 6 NATURAL))  	            (ccc . ,(ly:make-pitch 2 0 NATURAL))	            (ddd . ,(ly:make-pitch 2 1 NATURAL))	            (eee . ,(ly:make-pitch 2 2 NATURAL))	            (fff . ,(ly:make-pitch 2 3 NATURAL))	            (ggg . ,(ly:make-pitch 2 4 NATURAL))	            (aaa . ,(ly:make-pitch 2 5 NATURAL))	            (bbb . ,(ly:make-pitch 2 6 NATURAL))  	    (DDDO . ,(ly:make-pitch -3 0 NATURAL))	    (SSSI . ,(ly:make-pitch -3 6 NATURAL))	    (LLLA . ,(ly:make-pitch -3 5 NATURAL))	    (SSSOL . ,(ly:make-pitch -3 4 NATURAL))	    (FFFA . ,(ly:make-pitch -3 3 NATURAL))	    (MMMI . ,(ly:make-pitch -3 2 NATURAL))	    (RRRE . ,(ly:make-pitch -3 1 NATURAL))	    (DDO . ,(ly:make-pitch -2 0 NATURAL))	    (SSI . ,(ly:make-pitch -2 6 NATURAL))	    (LLA . ,(ly:make-pitch -2 5 NATURAL))	    (SSOL . ,(ly:make-pitch -2 4 NATURAL))	    (FFA . ,(ly:make-pitch -2 3 NATURAL))	    (MMI . ,(ly:make-pitch -2 2 NATURAL))	    (RRE . ,(ly:make-pitch -2 1 NATURAL))	    (DO . ,(ly:make-pitch -1 0 NATURAL))	            (RE . ,(ly:make-pitch -1 1 NATURAL))	            (MI . ,(ly:make-pitch -1 2 NATURAL))	            (FA . ,(ly:make-pitch -1 3 NATURAL))	            (SOL . ,(ly:make-pitch -1 4 NATURAL))	            (LA . ,(ly:make-pitch -1 5 NATURAL))	            (SI . ,(ly:make-pitch -1 6 NATURAL))	            (do . ,(ly:make-pitch 0 0 NATURAL))	            (re . ,(ly:make-pitch 0 1 NATURAL))	            (mi . ,(ly:make-pitch 0 2 NATURAL))	            (fa . ,(ly:make-pitch 0 3 NATURAL))	            (sol . ,(ly:make-pitch 0 4 NATURAL))	            (la . ,(ly:make-pitch 0 5 NATURAL))	            (si . ,(ly:make-pitch 0 6 NATURAL))	            (ddo . ,(ly:make-pitch 1 0 NATURAL))	            (rre . ,(ly:make-pitch 1 1 NATURAL))	            (mmi . ,(ly:make-pitch 1 2 NATURAL))	            (ffa . ,(ly:make-pitch 1 3 NATURAL))	            (ssol . ,(ly:make-pitch 1 4 NATURAL))	            (lla . ,(ly:make-pitch 1 5 NATURAL))	            (ssi . ,(ly:make-pitch 1 6 NATURAL))  	    (dddo . ,(ly:make-pitch 2 0 NATURAL))	    (rrre . ,(ly:make-pitch 2 1 NATURAL))	    (mmmi . ,(ly:make-pitch 2 2 NATURAL))	    (fffa . ,(ly:make-pitch 2 3 NATURAL))	    (sssol . ,(ly:make-pitch 2 4 NATURAL))	    (llla . ,(ly:make-pitch 2 5 NATURAL))	    (sssi . ,(ly:make-pitch 2 6 NATURAL))                   
                                                                                                                                                                                                                                                                    (CCCZ . ,(ly:make-pitch -3 0 FLAT))	             (BBBZ . ,(ly:make-pitch -3 6 FLAT))	                    (AAAZ . ,(ly:make-pitch -3 5 FLAT))	            (GGGZ . ,(ly:make-pitch -3 4 FLAT))	            (FFFZ . ,(ly:make-pitch -3 3 FLAT))	            (EEEZ . ,(ly:make-pitch -3 2 FLAT))	            (DDDZ . ,(ly:make-pitch -3 1 FLAT))	            (CCZ . ,(ly:make-pitch -2 0 FLAT))	            (BBZ . ,(ly:make-pitch -2 6 FLAT))	            (AAZ . ,(ly:make-pitch -2 5 FLAT))	            (GGZ . ,(ly:make-pitch -2 4 FLAT))	            (FFA . ,(ly:make-pitch -2 3 FLAT))	            (EEZ . ,(ly:make-pitch -2 2 FLAT))	            (DDZ . ,(ly:make-pitch -2 1 FLAT))	            (CZ . ,(ly:make-pitch -1 0 FLAT))	            (DZ . ,(ly:make-pitch -1 1 FLAT))	            (EZ . ,(ly:make-pitch -1 2 FLAT))	            (FZ . ,(ly:make-pitch -1 3 FLAT))	            (GZ . ,(ly:make-pitch -1 4 FLAT))	            (AZ . ,(ly:make-pitch -1 5 FLAT))	            (BZ . ,(ly:make-pitch -1 6 FLAT))	            (cz . ,(ly:make-pitch 0 0 FLAT))	            (dz . ,(ly:make-pitch 0 1 FLAT))	            (ez . ,(ly:make-pitch 0 2 FLAT))	            (fz . ,(ly:make-pitch 0 3 FLAT))	            (gz . ,(ly:make-pitch 0 4 FLAT))	            (az . ,(ly:make-pitch 0 5 FLAT))	            (bz . ,(ly:make-pitch 0 6 FLAT))	            (ccz . ,(ly:make-pitch 1 0 FLAT))	            (ddz . ,(ly:make-pitch 1 1 FLAT))	            (eez . ,(ly:make-pitch 1 2 FLAT))	            (ffz . ,(ly:make-pitch 1 3 FLAT))	            (ggz . ,(ly:make-pitch 1 4 FLAT))	            (aaz . ,(ly:make-pitch 1 5 FLAT))	            (bbz . ,(ly:make-pitch 1 6 FLAT))	            (cccz . ,(ly:make-pitch 2 0 FLAT))	            (dddz . ,(ly:make-pitch 2 1 FLAT))	            (eeez . ,(ly:make-pitch 2 2 FLAT))	            (fffz . ,(ly:make-pitch 2 3 FLAT))	            (gggz . ,(ly:make-pitch 2 4 FLAT))	            (aaaz . ,(ly:make-pitch 2 5 FLAT))	            (bbbz . ,(ly:make-pitch 2 6 FLAT))	            (DDDOB . ,(ly:make-pitch -3 0 FLAT))	            (SSSIB . ,(ly:make-pitch -3 6 FLAT))	            (LLLAB . ,(ly:make-pitch -3 5 FLAT))	            (SSSOLB . ,(ly:make-pitch -3 4 FLAT))	            (FFFAB . ,(ly:make-pitch -3 3 FLAT))	            (MMMIB . ,(ly:make-pitch -3 2 FLAT))	            (RRREB . ,(ly:make-pitch -3 1 FLAT))	            (DDOB . ,(ly:make-pitch -2 0 FLAT))	            (SSIB . ,(ly:make-pitch -2 6 FLAT))	            (LLAB . ,(ly:make-pitch -2 5 FLAT))	            (SSOLB . ,(ly:make-pitch -2 4 FLAT))	            (FFAB . ,(ly:make-pitch -2 3 FLAT))	            (MMIB . ,(ly:make-pitch -2 2 FLAT))	            (RREB . ,(ly:make-pitch -2 1 FLAT))	            (DOB . ,(ly:make-pitch -1 0 FLAT))	            (REB . ,(ly:make-pitch -1 1 FLAT))	            (MIB . ,(ly:make-pitch -1 2 FLAT))	            (FAB . ,(ly:make-pitch -1 3 FLAT))	            (SOLB . ,(ly:make-pitch -1 4 FLAT))	            (LAB . ,(ly:make-pitch -1 5 FLAT))	            (SIB . ,(ly:make-pitch -1 6 FLAT))	            (dob . ,(ly:make-pitch 0 0 FLAT))	            (reb . ,(ly:make-pitch 0 1 FLAT))	            (mib . ,(ly:make-pitch 0 2 FLAT))	            (fab . ,(ly:make-pitch 0 3 FLAT))	            (solb . ,(ly:make-pitch 0 4 FLAT))	            (lab . ,(ly:make-pitch 0 5 FLAT))	            (sib . ,(ly:make-pitch 0 6 FLAT))	            (ddob . ,(ly:make-pitch 1 0 FLAT))	            (rreb . ,(ly:make-pitch 1 1 FLAT))	            (mmib . ,(ly:make-pitch 1 2 FLAT))	            (ffab . ,(ly:make-pitch 1 3 FLAT))	            (ssolb . ,(ly:make-pitch 1 4 FLAT))	            (llab . ,(ly:make-pitch 1 5 FLAT))	            (ssib . ,(ly:make-pitch 1 6 FLAT))	            (dddob . ,(ly:make-pitch 2 0 FLAT))	            (rrreb . ,(ly:make-pitch 2 1 FLAT))	            (mmmib . ,(ly:make-pitch 2 2 FLAT))	            (fffab . ,(ly:make-pitch 2 3 FLAT))	            (sssolb . ,(ly:make-pitch 2 4 FLAT))	            (lllab . ,(ly:make-pitch 2 5 FLAT))	            (sssib . ,(ly:make-pitch 2 6 FLAT))       
                                                                                                                                                                                                                                                                    (CCCZZ . ,(ly:make-pitch -3 0 DOUBLE-FLAT))	     (BBBZZ . ,(ly:make-pitch -3 6 DOUBLE-FLAT))	            (AAAZZ . ,(ly:make-pitch -3 5 DOUBLE-FLAT))	    (GGGZZ . ,(ly:make-pitch -3 4 DOUBLE-FLAT))	    (FFFZZ . ,(ly:make-pitch -3 3 DOUBLE-FLAT))	    (EEEZZ . ,(ly:make-pitch -3 2 DOUBLE-FLAT))	    (DDDZZ . ,(ly:make-pitch -3 1 DOUBLE-FLAT))	    (CCZZ . ,(ly:make-pitch -2 0 DOUBLE-FLAT))	    (BBZZ . ,(ly:make-pitch -2 6 DOUBLE-FLAT))	    (AAZZ . ,(ly:make-pitch -2 5 DOUBLE-FLAT))	    (GGZZ . ,(ly:make-pitch -2 4 DOUBLE-FLAT))	    (FFZZ . ,(ly:make-pitch -2 3 DOUBLE-FLAT))	    (EEZZ . ,(ly:make-pitch -2 2 DOUBLE-FLAT))	    (DDZZ . ,(ly:make-pitch -2 1 DOUBLE-FLAT))	    (CZZ . ,(ly:make-pitch -1 0 DOUBLE-FLAT))	    (DZZ . ,(ly:make-pitch -1 1 DOUBLE-FLAT))	    (EZZ . ,(ly:make-pitch -1 2 DOUBLE-FLAT))	    (FZZ . ,(ly:make-pitch -1 3 DOUBLE-FLAT))	    (GZZ . ,(ly:make-pitch -1 4 DOUBLE-FLAT))	    (AZZ . ,(ly:make-pitch -1 5 DOUBLE-FLAT))	    (BZZ . ,(ly:make-pitch -1 6 DOUBLE-FLAT))	    (czz . ,(ly:make-pitch 0 0 DOUBLE-FLAT))	    (dzz . ,(ly:make-pitch 0 1 DOUBLE-FLAT))	    (ezz . ,(ly:make-pitch 0 2 DOUBLE-FLAT))	    (fzz . ,(ly:make-pitch 0 3 DOUBLE-FLAT))	    (gzz . ,(ly:make-pitch 0 4 DOUBLE-FLAT))	    (azz . ,(ly:make-pitch 0 5 DOUBLE-FLAT))	    (bzz . ,(ly:make-pitch 0 6 DOUBLE-FLAT))	    (cczz . ,(ly:make-pitch 1 0 DOUBLE-FLAT))	    (ddzz . ,(ly:make-pitch 1 1 DOUBLE-FLAT))	    (eezz . ,(ly:make-pitch 1 2 DOUBLE-FLAT))	    (ffzz . ,(ly:make-pitch 1 3 DOUBLE-FLAT))	    (ggzz . ,(ly:make-pitch 1 4 DOUBLE-FLAT))	    (aazz . ,(ly:make-pitch 1 5 DOUBLE-FLAT))	    (bbzz . ,(ly:make-pitch 1 6 DOUBLE-FLAT))	    (ccczz . ,(ly:make-pitch 2 0 DOUBLE-FLAT))	    (dddzz . ,(ly:make-pitch 2 1 DOUBLE-FLAT))	    (eeezz . ,(ly:make-pitch 2 2 DOUBLE-FLAT))	    (fffzz . ,(ly:make-pitch 2 3 DOUBLE-FLAT))	    (gggzz . ,(ly:make-pitch 2 4 DOUBLE-FLAT))	    (aaazz . ,(ly:make-pitch 2 5 DOUBLE-FLAT))	    (bbbzz . ,(ly:make-pitch 2 6 DOUBLE-FLAT))	    (DDDOBB . ,(ly:make-pitch -3 0 DOUBLE-FLAT))	    (SSSIBB . ,(ly:make-pitch -3 6 DOUBLE-FLAT))	    (LLLABB . ,(ly:make-pitch -3 5 DOUBLE-FLAT))	    (SSSOLBB . ,(ly:make-pitch -3 4 DOUBLE-FLAT))	    (FFFABB . ,(ly:make-pitch -3 3 DOUBLE-FLAT))	    (MMMIBB . ,(ly:make-pitch -3 2 DOUBLE-FLAT))	    (RRREBB . ,(ly:make-pitch -3 1 DOUBLE-FLAT))	    (DDOBB . ,(ly:make-pitch -2 0 DOUBLE-FLAT))	    (SSIBB . ,(ly:make-pitch -2 6 DOUBLE-FLAT))	    (LLABB . ,(ly:make-pitch -2 5 DOUBLE-FLAT))	    (SSOLBB . ,(ly:make-pitch -2 4 DOUBLE-FLAT))	    (FFABB . ,(ly:make-pitch -2 3 DOUBLE-FLAT))	    (MMIBB . ,(ly:make-pitch -2 2 DOUBLE-FLAT))	    (RREBB . ,(ly:make-pitch -2 1 DOUBLE-FLAT))	    (DOBB . ,(ly:make-pitch -1 0 DOUBLE-FLAT))	    (REBB . ,(ly:make-pitch -1 1 DOUBLE-FLAT))	    (MIBB . ,(ly:make-pitch -1 2 DOUBLE-FLAT))	    (FABB . ,(ly:make-pitch -1 3 DOUBLE-FLAT))	    (SOLBB . ,(ly:make-pitch -1 4 DOUBLE-FLAT))	    (LABB . ,(ly:make-pitch -1 5 DOUBLE-FLAT))	    (SIBB . ,(ly:make-pitch -1 6 DOUBLE-FLAT))	    (dobb . ,(ly:make-pitch 0 0 DOUBLE-FLAT))	    (rebb . ,(ly:make-pitch 0 1 DOUBLE-FLAT))	    (mibb . ,(ly:make-pitch 0 2 DOUBLE-FLAT))	    (fabb . ,(ly:make-pitch 0 3 DOUBLE-FLAT))	    (solbb . ,(ly:make-pitch 0 4 DOUBLE-FLAT))	    (labb . ,(ly:make-pitch 0 5 DOUBLE-FLAT))	    (sibb . ,(ly:make-pitch 0 6 DOUBLE-FLAT))	    (ddobb . ,(ly:make-pitch 1 0 DOUBLE-FLAT))	    (rrebb . ,(ly:make-pitch 1 1 DOUBLE-FLAT))	    (mmibb . ,(ly:make-pitch 1 2 DOUBLE-FLAT))	    (ffabb . ,(ly:make-pitch 1 3 DOUBLE-FLAT))	    (ssolbb . ,(ly:make-pitch 1 4 DOUBLE-FLAT))	    (llabb . ,(ly:make-pitch 1 5 DOUBLE-FLAT))	    (ssibb . ,(ly:make-pitch 1 6 DOUBLE-FLAT))	    (dddobb . ,(ly:make-pitch 2 0 DOUBLE-FLAT))	    (rrrebb . ,(ly:make-pitch 2 1 DOUBLE-FLAT))	    (mmmibb . ,(ly:make-pitch 2 2 DOUBLE-FLAT))	    (fffabb . ,(ly:make-pitch 2 3 DOUBLE-FLAT))	    (sssolbb . ,(ly:make-pitch 2 4 DOUBLE-FLAT))	    (lllabb . ,(ly:make-pitch 2 5 DOUBLE-FLAT))	    (sssibb . ,(ly:make-pitch 2 6 DOUBLE-FLAT))       
                                                                                                                                                                                                                                                                    (CCCS . ,(ly:make-pitch -3 0 SHARP))	     (BBBS . ,(ly:make-pitch -3 6 SHARP))	            (AAAS . ,(ly:make-pitch -3 5 SHARP))	            (GGGS . ,(ly:make-pitch -3 4 SHARP))	            (FFFS . ,(ly:make-pitch -3 3 SHARP))	            (EEES . ,(ly:make-pitch -3 2 SHARP))	            (DDDS . ,(ly:make-pitch -3 1 SHARP))	            (CCS . ,(ly:make-pitch -2 0 SHARP))	            (BBS . ,(ly:make-pitch -2 6 SHARP))	            (AAS . ,(ly:make-pitch -2 5 SHARP))	            (GGS . ,(ly:make-pitch -2 4 SHARP))	            (FFS . ,(ly:make-pitch -2 3 SHARP))	            (EES . ,(ly:make-pitch -2 2 SHARP))	            (DDS . ,(ly:make-pitch -2 1 SHARP))	            (CS . ,(ly:make-pitch -1 0 SHARP))	            (DS . ,(ly:make-pitch -1 1 SHARP))	            (ES . ,(ly:make-pitch -1 2 SHARP))	            (FS . ,(ly:make-pitch -1 3 SHARP))	            (GS . ,(ly:make-pitch -1 4 SHARP))	            (AS . ,(ly:make-pitch -1 5 SHARP))	            (BS . ,(ly:make-pitch -1 6 SHARP))	            (cs . ,(ly:make-pitch 0 0 SHARP))	            (ds . ,(ly:make-pitch 0 1 SHARP))	            (es . ,(ly:make-pitch 0 2 SHARP))	            (fs . ,(ly:make-pitch 0 3 SHARP))	            (gs . ,(ly:make-pitch 0 4 SHARP))	            (as . ,(ly:make-pitch 0 5 SHARP))	            (bs . ,(ly:make-pitch 0 6 SHARP))	            (ccs . ,(ly:make-pitch 1 0 SHARP))	            (dds . ,(ly:make-pitch 1 1 SHARP))	            (ees . ,(ly:make-pitch 1 2 SHARP))	            (ffs . ,(ly:make-pitch 1 3 SHARP))	            (ggs . ,(ly:make-pitch 1 4 SHARP))	            (aas . ,(ly:make-pitch 1 5 SHARP))	            (bbs . ,(ly:make-pitch 1 6 SHARP))	            (cccs . ,(ly:make-pitch 2 0 SHARP))	            (ddds . ,(ly:make-pitch 2 1 SHARP))	            (eees . ,(ly:make-pitch 2 2 SHARP))	            (fffs . ,(ly:make-pitch 2 3 SHARP))	            (gggs . ,(ly:make-pitch 2 4 SHARP))	            (aaas . ,(ly:make-pitch 2 5 SHARP))	            (bbbs . ,(ly:make-pitch 2 6 SHARP))	            (DDDOD . ,(ly:make-pitch -3 0 SHARP))	            (SSSID . ,(ly:make-pitch -3 6 SHARP))	            (LLLAD . ,(ly:make-pitch -3 5 SHARP))	            (SSSOLD . ,(ly:make-pitch -3 4 SHARP))	    (FFFAD . ,(ly:make-pitch -3 3 SHARP))	    (MMMID . ,(ly:make-pitch -3 2 SHARP))	    (RRRED . ,(ly:make-pitch -3 1 SHARP))	    (DDOD . ,(ly:make-pitch -2 0 SHARP))	            (SSID . ,(ly:make-pitch -2 6 SHARP))	            (LLAD . ,(ly:make-pitch -2 5 SHARP))	            (SSOLD . ,(ly:make-pitch -2 4 SHARP))	            (FFAD . ,(ly:make-pitch -2 3 SHARP))	            (MMID . ,(ly:make-pitch -2 2 SHARP))	            (RRED . ,(ly:make-pitch -2 1 SHARP))	            (DOD . ,(ly:make-pitch -1 0 SHARP))	            (RED . ,(ly:make-pitch -1 1 SHARP))	            (MID . ,(ly:make-pitch -1 2 SHARP))	            (FAD . ,(ly:make-pitch -1 3 SHARP))	            (SOLD . ,(ly:make-pitch -1 4 SHARP))	            (LAD . ,(ly:make-pitch -1 5 SHARP))	            (SID . ,(ly:make-pitch -1 6 SHARP))	            (dod . ,(ly:make-pitch 0 0 SHARP))	            (red . ,(ly:make-pitch 0 1 SHARP))	            (mid . ,(ly:make-pitch 0 2 SHARP))	            (fad . ,(ly:make-pitch 0 3 SHARP))	            (sold . ,(ly:make-pitch 0 4 SHARP))	            (lad . ,(ly:make-pitch 0 5 SHARP))	            (sid . ,(ly:make-pitch 0 6 SHARP))	            (ddod . ,(ly:make-pitch 1 0 SHARP))	            (rred . ,(ly:make-pitch 1 1 SHARP))	            (mmid . ,(ly:make-pitch 1 2 SHARP))	            (ffad . ,(ly:make-pitch 1 3 SHARP))	            (ssold . ,(ly:make-pitch 1 4 SHARP))	            (llad . ,(ly:make-pitch 1 5 SHARP))	            (ssid . ,(ly:make-pitch 1 6 SHARP))	            (dddod . ,(ly:make-pitch 2 0 SHARP))	            (rrred . ,(ly:make-pitch 2 1 SHARP))	            (mmmid . ,(ly:make-pitch 2 2 SHARP))	            (fffad . ,(ly:make-pitch 2 3 SHARP))	            (sssold . ,(ly:make-pitch 2 4 SHARP))	            (lllad . ,(ly:make-pitch 2 5 SHARP))	            (sssid . ,(ly:make-pitch 2 6 SHARP))               
                                                                                                                                                                                                                                                                    (CCCSS . ,(ly:make-pitch -3 0 DOUBLE-SHARP))    (BBBSS . ,(ly:make-pitch -3 6 DOUBLE-SHARP))	            (AAASS . ,(ly:make-pitch -3 5 DOUBLE-SHARP))	    (GGGSS . ,(ly:make-pitch -3 4 DOUBLE-SHARP))	    (FFFSS . ,(ly:make-pitch -3 3 DOUBLE-SHARP))	    (EEESS . ,(ly:make-pitch -3 2 DOUBLE-SHARP))	    (DDDSS . ,(ly:make-pitch -3 1 DOUBLE-SHARP))	    (CCSS . ,(ly:make-pitch -2 0 DOUBLE-SHARP))	    (BBSS . ,(ly:make-pitch -2 6 DOUBLE-SHARP))	    (AASS . ,(ly:make-pitch -2 5 DOUBLE-SHARP))	    (GGSS . ,(ly:make-pitch -2 4 DOUBLE-SHARP))	    (FFSS . ,(ly:make-pitch -2 3 DOUBLE-SHARP))	    (EESS . ,(ly:make-pitch -2 2 DOUBLE-SHARP))	    (DDSS . ,(ly:make-pitch -2 1 DOUBLE-SHARP))	    (CSS . ,(ly:make-pitch -1 0 DOUBLE-SHARP))	    (DSS . ,(ly:make-pitch -1 1 DOUBLE-SHARP))	    (ESS . ,(ly:make-pitch -1 2 DOUBLE-SHARP))	    (FSS . ,(ly:make-pitch -1 3 DOUBLE-SHARP))	    (GSS . ,(ly:make-pitch -1 4 DOUBLE-SHARP))	    (ASS . ,(ly:make-pitch -1 5 DOUBLE-SHARP))	    (BSS . ,(ly:make-pitch -1 6 DOUBLE-SHARP))	    (css . ,(ly:make-pitch 0 0 DOUBLE-SHARP))	    (dss . ,(ly:make-pitch 0 1 DOUBLE-SHARP))	    (ess . ,(ly:make-pitch 0 2 DOUBLE-SHARP))	    (fss . ,(ly:make-pitch 0 3 DOUBLE-SHARP))	    (gss . ,(ly:make-pitch 0 4 DOUBLE-SHARP))	    (ass . ,(ly:make-pitch 0 5 DOUBLE-SHARP))	    (bss . ,(ly:make-pitch 0 6 DOUBLE-SHARP))	    (ccss . ,(ly:make-pitch 1 0 DOUBLE-SHARP))	    (ddss . ,(ly:make-pitch 1 1 DOUBLE-SHARP))	    (eess . ,(ly:make-pitch 1 2 DOUBLE-SHARP))	    (ffss . ,(ly:make-pitch 1 3 DOUBLE-SHARP))	    (ggss . ,(ly:make-pitch 1 4 DOUBLE-SHARP))	    (aass . ,(ly:make-pitch 1 5 DOUBLE-SHARP))	    (bbss . ,(ly:make-pitch 1 6 DOUBLE-SHARP))	    (cccss . ,(ly:make-pitch 2 0 DOUBLE-SHARP))	    (dddss . ,(ly:make-pitch 2 1 DOUBLE-SHARP))	    (eeess . ,(ly:make-pitch 2 2 DOUBLE-SHARP))	    (fffss . ,(ly:make-pitch 2 3 DOUBLE-SHARP))	    (gggss . ,(ly:make-pitch 2 4 DOUBLE-SHARP))	    (aaass . ,(ly:make-pitch 2 5 DOUBLE-SHARP))	    (bbbss . ,(ly:make-pitch 2 6 DOUBLE-SHARP))	    (DDDODD . ,(ly:make-pitch -3 0 DOUBLE-SHARP))	    (SSSIDD . ,(ly:make-pitch -3 6 DOUBLE-SHARP))	    (LLLADD . ,(ly:make-pitch -3 5 DOUBLE-SHARP))	    (SSSOLDD . ,(ly:make-pitch -3 4 DOUBLE-SHARP))   (FFFADD . ,(ly:make-pitch -3 3 DOUBLE-SHARP))	    (MMMIDD . ,(ly:make-pitch -3 2 DOUBLE-SHARP))	    (RRREDD . ,(ly:make-pitch -3 1 DOUBLE-SHARP))	    (DDODD . ,(ly:make-pitch -2 0 DOUBLE-SHARP))	    (SSIDD . ,(ly:make-pitch -2 6 DOUBLE-SHARP))	    (LLADD . ,(ly:make-pitch -2 5 DOUBLE-SHARP))	    (SSOLDD . ,(ly:make-pitch -2 4 DOUBLE-SHARP))	    (FFADD . ,(ly:make-pitch -2 3 DOUBLE-SHARP))	    (MMIDD . ,(ly:make-pitch -2 2 DOUBLE-SHARP))	    (RREDD . ,(ly:make-pitch -2 1 DOUBLE-SHARP))	    (DODD . ,(ly:make-pitch -1 0 DOUBLE-SHARP))	    (REDD . ,(ly:make-pitch -1 1 DOUBLE-SHARP))	    (MIDD . ,(ly:make-pitch -1 2 DOUBLE-SHARP))	    (FADD . ,(ly:make-pitch -1 3 DOUBLE-SHARP))	    (SOLDD . ,(ly:make-pitch -1 4 DOUBLE-SHARP))	    (LADD . ,(ly:make-pitch -1 5 DOUBLE-SHARP))	    (SIDD . ,(ly:make-pitch -1 6 DOUBLE-SHARP))	    (dodd . ,(ly:make-pitch 0 0 DOUBLE-SHARP))	    (redd . ,(ly:make-pitch 0 1 DOUBLE-SHARP))	    (midd . ,(ly:make-pitch 0 2 DOUBLE-SHARP))	    (fadd . ,(ly:make-pitch 0 3 DOUBLE-SHARP))	    (soldd . ,(ly:make-pitch 0 4 DOUBLE-SHARP))	    (ladd . ,(ly:make-pitch 0 5 DOUBLE-SHARP))	    (sidd . ,(ly:make-pitch 0 6 DOUBLE-SHARP))	    (ddodd . ,(ly:make-pitch 1 0 DOUBLE-SHARP))	    (rredd . ,(ly:make-pitch 1 1 DOUBLE-SHARP))	    (mmidd . ,(ly:make-pitch 1 2 DOUBLE-SHARP))	    (ffadd . ,(ly:make-pitch 1 3 DOUBLE-SHARP))	    (ssoldd . ,(ly:make-pitch 1 4 DOUBLE-SHARP))	    (lladd . ,(ly:make-pitch 1 5 DOUBLE-SHARP))	    (ssidd . ,(ly:make-pitch 1 6 DOUBLE-SHARP))      (dddodd . ,(ly:make-pitch 2 0 DOUBLE-SHARP))	    (rrredd . ,(ly:make-pitch 2 1 DOUBLE-SHARP))	    (mmmidd . ,(ly:make-pitch 2 2 DOUBLE-SHARP))	    (fffadd . ,(ly:make-pitch 2 3 DOUBLE-SHARP))	    (sssoldd . ,(ly:make-pitch 2 4 DOUBLE-SHARP))	    (llladd . ,(ly:make-pitch 2 5 DOUBLE-SHARP))	    (sssidd . ,(ly:make-pitch 2 6 DOUBLE-SHARP))      	
                                                                                                                                                                                                                                                                             ) #(ly:parser-set-note-names parser pitchnames)  
                                                                                                                                                                                                                                                                   doM = {\key do \major} dodM = {\key dod \major} rebM = {\key reb \major} reM = {\key re \major} mibM = {\key mib \major} miM = {\key mi \major} faM = {\key fa \major} fadM = {\key fad \major} solbM = {\key solb \major} solM = {\key sol \major} labM = {\key lab \major} laM = {\key la \major} sibM = {\key sib \major} siM = {\key si \major} lam = {\key la \minor} rem = {\key re \minor} solm = {\key sol \minor} dom = {\key do \minor} fam = {\key fa \minor} sibm = {\key sib \minor} mibm = {\key mib \minor} labm = {\key lab \minor} mim = {\key mi \minor} sim = {\key si \minor} fadm = {\key fad \minor} dodm = {\key dod \minor} soldm = {\key sold \minor} redm = {\key red \minor} 

%**********************************************************************
%{      %%%%%%%%%%%%                                                                 %}                                                                                                                                           col = #(define-music-function (  parser location col m ) ( color? ly:music? ) #{  \tweak color #col #m  #}) COL = #(define-music-function (  parser location symb1  col ) ( symbol-list-or-symbol?  color? ) #{ { \stopStaff \override $symb1 color = $col \startStaff } #}) xy = #(define-event-function (parser location x y m) (number? number? ly:music?) #{  \tweak #'extra-offset #(cons x y) #m #})  XY =  #(define-music-function (  parser location symb x y ) ( symbol-list-or-symbol? number? number? ) #{ \override $symb #'extra-offset = #(cons x y) #})  pos = #(define-event-function  (  parser location x y m )  (  number? number? ly:music? )  #{   \tweak #'positions  #(cons x y) #m   #}) POS = #(define-music-function (  parser location symb1 y1 y2 )  ( symbol? number? number? ) #{ { \override $symb1 .positions = #(cons y1 y2)   } #})  rot = #(define-music-function (  parser location  x  m ) ( number?  ly:music? ) #{ \tweak  #'rotation  #(list x 0 0 ) #m #}) ROT = #(define-music-function (  parser location symb1 x  ) ( symbol-list-or-symbol? number? ) #{ \override $symb1 #'rotation = #(list x 0 0 ) #}) space =  #(define-music-function (  parser location  x y m ) ( number? number? ly:music? ) #{ \tweak #'extra-spacing-width  #(cons x y) #m #}) SPACE =  #(define-music-function (  parser location symb1 x y ) ( symbol-list-or-symbol? number? number? ) #{ \once  \override $symb1 #'X-extent = #(cons x y) #}) thick =  #(define-event-function (  parser location  x m ) ( number? ly:music? ) #{  \tweak  thickness   #x #m #}) THICK =  #(define-music-function (  parser location symb1  x  ) ( symbol-list-or-symbol? number?  ) #{ \stopStaff \override $symb1 thickness =  #x \startStaff #})  STEM =  #(define-music-function (  parser location  x  ) (  number?  ) #{  \override Stem length =  #x #}) stem =  #(define-music-function (  parser location  x  ) (  number?  ) #{ \once \override Stem length =  #x #}) BAR =  #(define-music-function (parser location x y ) (number? number?) #{  \override Staff.BarLine.bar-extent =  #(cons x y) #}) SIZE =  #(define-music-function (  parser location symb1 x  ) ( symbol-list-or-symbol?  number? ) #{  \override $symb1 font-size = #x #}) size =  #(define-music-function (  parser location  x ) ( number? ) #{ \stopStaff \set fontSize = #x \override Staff.StaffSymbol.staff-space = #( magstep x )    \startStaff #}) line =  #(define-music-function (  parser location  x  ) (  number? ) #{ \stopStaff \override Staff.StaffSymbol #'line-count = #x \startStaff  #}) "t" = #(define-music-function (parser location m1 m2 m3) (ly:music? ly:music? ly:music?)#{ \tuplet 3/2 { $m1 $m2 $m3 } #}) "pip" = \bar ":|.|:" "\\|" = \bar "|"  " " = \bar " "  "ii" = \bar "||"  "iI" = \bar "|." "ip" = \bar ".|:"  "pi" = \bar ":|." voltaun = \markup {1} "1°" =  { \set Score.repeatCommands = #(list(list 'volta voltaun))}  "2°" = { { \set Score.repeatCommands = #'((volta "f")) \bar ":|." }  { \set Score.repeatCommands = #'((volta "2"))} } "2°/" = { \set Score.repeatCommands = #'((volta #f ))} linePos = #(define-music-function (parser location  str mus ) (  list? ly:music? ) #{ \stopStaff \override Staff.StaffSymbol.line-positions = #str \startStaff $mus #}) LedgerLinePositions = #(define-music-function (parser location  str mus ) (  list? ly:music? ) #{ \stopStaff \override Staff.StaffSymbol.ledger-positions = #str \startStaff $mus #}) "mm" = #(define-scheme-function (parser location   text1 text2 )(  markup? markup? )  #{ \markup  { #text1 #text2 } #})
%{        %%%%%%%%                FACILYPOND pour Lilypond 2.18                      %}                                                                                                                                           structure = #(define-music-function (parser location  str mus ) (  list? ly:music? ) #{ \set Timing.beamExceptions = #'() \set beatStructure = #str   $mus #}) base = #(define-music-function (parser location  x y  ) ( number? number? ) #{  \set baseMoment = #(ly:make-moment  x y  )  #}) sub = \set subdivideBeams = ##t nosub = \set subdivideBeams = ##f  T = #(define-music-function (parser location x y ) (number? number? ) #{  \time #( cons x y  ) #}) #(define-public (format-time-sig-note grob) (let* ((frac (ly:grob-property grob 'fraction)) (num (if (pair? frac) (car frac) 4))  (den (if (pair? frac) (cdr frac) 4)) (m (markup #:override '(baseline-skip . 0.5)  #:center-column (#:number (number->string num)  #:override '(style . default)  #:note (number->string den) DOWN)))) (grob-interpret-markup grob m)))  Tnote = #(define-music-function (parser location x y ) (number? number?) #{  \once \override Staff.TimeSignature.stencil = #format-time-sig-note \time #( cons x y  ) #})  "fa" = { \clef bass } "sol" = { \clef treble } "sol1" = { \clef french } "perc" = { \sol \set Staff.clefGlyph = #"clefs.percussion" \set Staff.clefPosition = #0  } "ut1" = { \clef soprano } "ut2" = { \clef mezzosoprano } "ut3" = { \clef alto } "ut4" = { \clef tenor } "ut5" = { \clef baritone } "fa3" = { \clef varbaritone } "fa5" = { \clef subbass }  "r" = #(define-music-function (parser location expr1 expr2) (number? ly:music?) #{ \repeat unfold $expr1 $expr2 #}) "%" = #(define-music-function (parser location expr1 expr2) (number? ly:music?) #{ \repeat percent $expr1 $expr2 #}) "\/" = \break "\_" = \pageBreak "\-" = { \noBreak } "\^" = { \noPageBreak }  "\\~" = \set Staff.pedalSustainStyle = #'bracket "\\," =  \sustainOn "\\'" = \sustainOff \sustainOn "\\;" = \sustainOff  compress = \compressFullBarRests "$" = { \mark \markup { \fontsize #-2 \musicglyph #"scripts.segno" } } "+" = { \mark \markup { \musicglyph #"scripts.coda" } } "+-" = { \XY Score.MetronomeMark -0.4 0 \tempo \markup { \fontsize #2 \musicglyph #"scripts.coda" } } "$-" = { \XY Score.MetronomeMark -0.1 0 \tempo \markup {  \musicglyph #"scripts.segno" }}  "XN" = \override Voice.NoteHead #'style = #'cross "xn" = #(define-music-function (  parser location  m ) (  ly:music? ) #{  \tweak  #'style  #'cross #m  #}) "XO" = \override NoteHead #'style = #'xcircle "xo" = #(define-music-function (  parser location  m ) (  ly:music? ) #{  \tweak  #'style  #'xcircle  #m  #}) "W" = \override Voice.NoteHead #'style = #'triangle "w" = #(define-music-function (  parser location  m ) (  ly:music? ) #{  \tweak  #'style  #'triangle   #m  #}) "V" = \override Voice.NoteHead #'style = #'harmonic-mixed "v" = #(define-music-function (  parser location  m ) (  ly:music? ) #{  \tweak  #'style  #'harmonic-mixed  #m  #}) "o" = #(define-music-function (  parser location  m ) (  ly:music? ) #{  \tweak  #'style  #'default #m  #}) "O" = \override Voice.NoteHead #'style = #'default  PS = #(define-music-function (parser location   nom nomcourt  mus ) (markup? markup?  ly:music? ) #{  { \new PianoStaff \with { instrumentName = #nom shortInstrumentName = #nomcourt } $mus }#})  "\\." = \startTrillSpan "\\:" = \stopTrillSpan "tr" = \trill  h =  #(define-scheme-function (parser location  taille texte )( number? markup? ) #{ \markup  {   \fontsize  #taille #texte } #}) "b" =  #(define-scheme-function (parser location  text1 ) ( markup? ) #{ \markup  { \bold #text1 } #})
%{         %%%%%                       Bertrand Monneret                             %}                                                                                                                                           ns = #(define-music-function   (parser location  mus) (ly:music?) #{  { \new Staff {  \compressFullBarRests   $mus  }  } #}) NS = #(define-music-function  (parser location num nom nomcourt taille son  mus) (markup? markup? markup? number? markup?  ly:music?)  #{  { \new Staff = #num   \with {  instrumentName = #nom shortInstrumentName = #nomcourt fontSize = # taille \override StaffSymbol.staff-space = #(magstep taille )}  {  \compressFullBarRests \set Staff.midiInstrument = #son  $mus  }  } #})  "SG" = #(define-music-function  (parser location   mus  ) ( ly:music? )  #{   \new StaffGroup $mus  #}) "\\{" = #(define-music-function  (parser location nom nomcourt  mus  ) ( markup? markup? ly:music? )  #{   \new GrandStaff  \with {  instrumentName = #nom shortInstrumentName = #nomcourt } $mus #}) "CS" = #(define-music-function  (parser location   mus  ) ( ly:music? )  #{   \new ChoirStaff $mus  #}) REPLACE = #(define-music-function (  parser location  symb txt ) ( symbol-list-or-symbol?  markup? ) #{ { \override $symb .stencil = #ly:text-interface::print \override $symb .text =  $txt } #})  LineThickness =  #(define-music-function (  parser location   b c x  ) ( number? number? number?   ) #{ \stopStaff \override Stem thickness = #b \override  Staff.BarLine #'hair-thickness =  #c \override Staff.StaffSymbol.ledger-line-thickness = #(cons  x  0 ) \startStaff #}) "d" = \stemUp "q" = \stemDown dq = \stemNeutral  qd = \stemNeutral   tt = \autoBeamOff  TT =  \autoBeamOn  q-d = #(define-music-function (parser location y) (number?) #{  \override Beam.auto-knee-gap = #y #}) ax = { \set Score.markFormatter = #format-mark-box-alphabet  \mark \default } "n" = { \set Score.markFormatter = #format-mark-box-numbers  \mark \default }  oC = { \omit Staff.Clef }  oTS = { \omit Staff.TimeSignature }   oBL = \override Staff.BarLine.break-visibility = #'#(#f #f #f)  oSSB = { \omit StaffGroup.SystemStartBracket } oF = { \omit Staff.Flag }     oKS = { \omit Staff.KeySignature }  oA = { \omit Staff.Accidental }  oNS = {  \omit MultiMeasureRest  \omit NoteHead \omit Beam \omit Stem \omit Accidental  \omit  Dots \omit Rest \omit StemTremolo }  oNH = {\omit NoteHead } oS = {\omit Stem}  oB = {\omit Beam  } oR = { \omit Rest \omit MultiMeasureRest } hS = { \hide Stem } hKS = {  \hide Staff.KeySignature } hBL  = { \hide Staff.BarLine } hC = { \hide Staff.Clef } hTS = { \hide Staff.TimeSignature }  hR = {  \hide Rest \hide MultiMeasureRest } hNH = { \hide NoteHead } "y" = \markup { \vspace #0.3 } "yy" = \markup { \vspace #0.6 } "tp" = #(define-music-function (parser location x y m1  ) ( number? number? ly:music?  ) #{ \tuplet #( cons x y  ) { $m1  } #}) "dyn" = #(define-scheme-function (parser location   text1 ) ( markup? ) #{ \markup  { \dynamic #text1 } #}) min-dist = #(define-music-function ( parser location  nb ) ( number? ) #{ { \override Score.NonMusicalPaperColumn.padding = $nb } #}) "i" = #(define-scheme-function (parser location text1 )(  markup? )  #{ \markup  {  \italic #text1 } #}) "u" = #(define-scheme-function (parser location   text1 )(  markup? )  #{ \markup { \underline  #text1 } #}) "ib" =  #(define-scheme-function (parser location  text1 )  ( markup? ) #{ \markup {\italic \bold  #text1 } #}) hN =  #(define-music-function (  parser location  x m ) ( number? ly:music? ) #{  \tweak  NoteColumn.X-offset #x  \tweak  NoteColumn.force-hshift   #x #m #}) 
%{          %%%                                                                      %}                                                                                                                                           V = #(define-music-function  (parser location nom1 mus1 ) ( markup?   ly:music? )   #{ \new Voice = #nom1 { #mus1  } #})  VV = #(define-music-function  (parser location nom1 mus1 nom2 mus2 ) ( markup?   ly:music? markup? ly:music? )   #{  <<  \new Voice = #nom1 { \voiceOne  #mus1  } \new Voice = #nom2 { \voiceTwo  #mus2  } >> #})  VVV = #(define-music-function  (parser location nom1 mus1 nom2 mus2 nom3 mus3) ( markup?   ly:music? markup? ly:music? markup? ly:music? ) #{  <<  \new Voice = #nom1 { \voiceOne  #mus1  } \new Voice = #nom2 { \voiceTwo  #mus2  } \new Voice = #nom3 { \voiceThree  #mus3  } >> #}) VVVV = #(define-music-function  (parser location nom1 mus1 nom2 mus2 nom3 mus3 nom4 mus4 ) ( markup? ly:music? markup? ly:music? markup? ly:music? markup? ly:music? ) #{  <<  \new Voice = #nom1 { \voiceOne  #mus1  } \new Voice = #nom2 { \voiceTwo  #mus2  }  \new Voice = #nom3 { \voiceThree  #mus3  } \new Voice = #nom4 { \voiceFour  #mus4  } >> #}) vv = #(define-music-function  (parser location  mus1  mus2 ) ( ly:music?  ly:music? )  #{  <<  \new Voice  { \voiceOne  #mus1  }  \new Voice  { \voiceTwo  #mus2  } >> #}) vvv = #(define-music-function  (parser location  mus1  mus2 mus3) ( ly:music?  ly:music? ly:music? )  #{  <<  \new Voice  { \voiceOne  #mus1  } \new Voice  { \voiceTwo  #mus2  } \new Voice  { \voiceThree  #mus3  } >> #}) vvvv = #(define-music-function  (parser location  mus1  mus2 mus3 mus4) (   ly:music?  ly:music? ly:music?  ly:music? ) #{  <<  \new Voice  { \voiceOne  #mus1  }  \new Voice  { \voiceTwo  #mus2  } \new Voice  { \voiceThree  #mus3  }  \new Voice  { \voiceFour  #mus4  } >> #}) L = #(define-music-function  (parser location nom1 mus1 ) ( markup?  ly:music? )   #{ { \new Lyrics \lyricsto $nom1 $mus1 }#}) LL = #(define-music-function  (parser location nom1 mus1  nom2 mus2 ) ( markup?  ly:music?   markup?   ly:music?  )   #{ { <<   \new Lyrics \lyricsto $nom1 $mus1  \new Lyrics \lyricsto $nom2 $mus2  >>}#}) LLL = #(define-music-function  (parser location nom1 mus1  nom2 mus2 nom3 mus3) ( markup?  ly:music?   markup?   ly:music? markup?   ly:music?  )  #{ { <<   \new Lyrics \lyricsto $nom1 $mus1 \new Lyrics \lyricsto $nom2 $mus2 \new Lyrics \lyricsto $nom3 $mus3 >>} #}) LLLL = #(define-music-function  (parser location nom1 mus1  nom2 mus2 nom3 mus3 nom4 mus4)  ( markup?  ly:music?   markup?   ly:music? markup?   ly:music? markup?   ly:music?  )  #{ { <<   \new Lyrics \lyricsto $nom1 $mus1 \new Lyrics \lyricsto $nom2 $mus2 \new Lyrics \lyricsto $nom3 $mus3 \new Lyrics \lyricsto $nom4 $mus4 >>} #})  mark-end-of-line = {   \once \override Score.RehearsalMark.break-visibility = #end-of-line-visible  \once \override Score.RehearsalMark.self-alignment-X = #RIGHT } ii-ip = \bar ".|:-||" "M" = #(define-scheme-function (parser location   text1 )( markup?  ) #{ \markup  { \override #'( baseline-skip . 2.7) \justify-string #text1 } #}) "m" = #(define-scheme-function (parser location   text1  )(  markup? )  #{ \markup  { #text1  } #}) txy = #(define-scheme-function (parser location  x y  text1 )( number? number? markup? ) #{ \markup \translate  #( cons x y  ) { #text1 } #}) "iu" =  #(define-scheme-function (parser location  text1 ) ( markup? ) #{ \markup  { \italic \underline  #text1 } #})  "bu" = #(define-scheme-function (parser location  text1 ) ( markup? ) #{ \markup  {  \bold \underline  #text1 } #}) #(define-markup-command (on-color layout props color arg) (color? markup?)(let* ((stencil (interpret-markup layout props arg)) (X-ext (ly:stencil-extent stencil X)) (Y-ext (ly:stencil-extent stencil Y))) (ly:stencil-add (ly:make-stencil (list 'color color (ly:stencil-expr (ly:round-filled-box X-ext Y-ext 0)) X-ext Y-ext)) stencil)))
%{           %              contact: be.monneret@laposte.net                         %}                                                                                                                                           \paper { markup-markup-spacing.basic-distance = 2.7  #(set-paper-size Taille-du-papier )  top-markup-spacing.basic-distance = #0 top-system-spacing.basic-distance = #0 system-system-spacing.basic-distance = #Distance-entre-les-systèmes  markup-system-spacing.basic-distance = #Distance-entre-texte-et-partition score-markup-spacing.basic-distance = #Distance-entre-texte-et-partition #(define left-margin (* Marge-gauche mm)) #(define right-margin (* M-droite mm))   #(define top-margin (* M-haut mm)) #(define bottom-margin (* M-bas mm)) }   #(set-global-staff-size taille-globale-de-la-partition)  \layout {  \context { \PianoStaff \consists #Span_stem_engraver } \context { \GrandStaff \consists #Span_stem_engraver } \context {\StaffGroup  \override StaffGrouper.staff-staff-spacing.basic-distance = #Distance-entre-les-portées-dans-un-groupement  \override StaffGrouper.staffgroup-staff-spacing.basic-distance = #Distance-entre-groupements-de-portées-dans-un-système } \context {\GrandStaff  \override StaffGrouper.staff-staff-spacing.basic-distance = #Distance-entre-les-portées-dans-un-groupement \override StaffGrouper.staffgroup-staff-spacing.basic-distance = #Distance-entre-groupements-de-portées-dans-un-système  } \context {\ChoirStaff   \override StaffGrouper.staff-staff-spacing.basic-distance = #Distance-entre-les-portées-dans-un-groupement \override StaffGrouper.staffgroup-staff-spacing.basic-distance = #Distance-entre-groupements-de-portées-dans-un-système  } \context {\PianoStaff  \override StaffGrouper.staff-staff-spacing.basic-distance = #Distance-entre-les-portées-dans-un-groupement  \override StaffGrouper.staffgroup-staff-spacing.basic-distance = #Distance-entre-groupements-de-portées-dans-un-système } #(define indent (* Marge-suppl-premier-système mm))   \override TextScript.padding = #2   \context { \Staff \override VerticalAxisGroup.default-staff-staff-spacing.basic-distance = #Distance-entre-les-portées \consists #Measure_counter_engraver }}   \paper { score-system-spacing.basic-distance = 0 } \header {  title = \titre composer = \compositeur   subtitle = \sous-titre instrument = \instrument poet = \librettiste meter = \vitesse  arranger = \arrangeur piece = \"pièce"  opus = \opus tagline = \slogan copyright = \copyright } oAll = {  \stopStaff \oTS \oC \oKS } All ={ \startStaff \undo \oAll } oStaff = { \omit Staff.StaffSymbol } hSpace = #(define-music-function ( parser location  nb ) ( number? ) #{ { \override Score.SpacingSpanner.spacing-increment = $nb } #})  "ub" =  #(define-scheme-function (parser location  text1 ) ( markup? ) #{ \markup  {  \underline \bold  #text1 } #}) "s" = #(define-scheme-function (parser location   m1  ) (  ly:music? ) #{ \markup { \translate #'( 0 . 0.5 ) \score {  $m1   \layout { indent = 0 } }  } #}) "c" = #(define-scheme-function (parser location text1 text2 ) ( markup? markup?  ) #{ \markup \column  { #text1 #text2 } #})  "ib" =  #(define-scheme-function (parser location  text1 text2 )  ( markup? markup? ) #{ \markup {  \italic \bold  #text1  #text2  } #}) "bi" = #(define-scheme-function (parser location  text1 )  ( markup? ) #{ \markup { \italic \bold  #text1 } #}) "ui" = #(define-scheme-function (parser location  text1 ) ( markup? ) #{ \markup  { \italic \underline  #text1 } #})  "vs" = \markup { } "VS" = \markup { \vspace #0.38 } 
%*************************************************************************************
%%%%%%%%%%% CONSTRUCTION DES PORTÉES
% Portées simple. Syntaxe: \NS "nom de la portée" "nom instr." "nom court instr." taille "son midi" { la musique }. Pour les sons, voici quelques exemples d'instruments: acoustic grand %%  electric grand %%   celesta  %% church organ %% orchestral harp %% bright acoustic %% harpsichord %% clarinet %% french horn  %% oboe  %% tuba %% trombone %%  english horn %% trumpet %%  muted trumpet %%  baritone sax %%  tenor sax %%  soprano sax  %%   alto sax  %%   flute %%   piccolo %%    bassoon     %% contrabass %%  acoustic bass  %%   electric bass (finger) %%  cello  %%  violin  %%  glockenspiel  %%   vibraphone  %%   marimba  %%   xylophone  %%  melodic tom   %%  tubular bells  %%   woodblock  %%  agogo  %%  viola    %%  acoustic guitar (nylon)  %%  electric guitar (jazz)  %%   accordion  %%  harmonica   %% choir aahs  %%  voice oohs   %% synth voice    %%    pizzicato strings    %%     timpani     %
\yy
\yy

{ 
do4  
}

%%%%%%%%%%%%%%%%%%%%
   
% CODES UTILES:
% caractères vides à utiliser dans du texte: 𐂃𐂃𐂃𐂃